(defwidget bar []
  (centerbox :orientation "h"
    (workspaces)
    time
    (sidestuff)))

(defwidget sidestuff []
  (box :class "sidestuff" :orientation "h" :space-evenly false :halign "end"
    (music)
    (label :text "MEM: ${round(EWW_RAM.used_mem_perc, 2)}%")
    (label :text "DISK: ${round((1 - (EWW_DISK["/"].free / EWW_DISK["/"].total)) * 100, 2)}%")
  ))


(deflisten workspaces :initial "[]" "./scripts/get-workspaces")
;(deflisten current_workspace :initial "1" "./scripts/get-active-workspace")
(defwidget workspaces [] (box :space-evenly false
    (for workspace in workspaces
      (eventbox :onclick "hyprctl dispatch workspace ${workspace.id}"
        (label :text "${workspace.id}" :class "workspace")
        ;(box :class "workspace ${workspace.windows > 0 ? "occupied" : "empty"}"
        ;  (label :text "${workspace.id}" :class "workspace ${workspace.id == current_workspace ? "current" : ""}" )
        ;)
      ))
  ))


(defwidget music []
  (box :class "music"
       :orientation "h"
       :space-evenly false
       :halign "center"
    {music != "" ? "ðŸŽµ${music}" : ""}))


(deflisten music :initial ""
  "playerctl --follow metadata --format '{{ artist }} - {{ title }}' || true")

(defpoll time :interval "10s"
  "date '+%H:%M %b %d, %Y'")

(defwindow bar
  :monitor 0
  :windowtype "dock"
  :geometry (geometry :x "0%"
                      :y "0%"
                      :width "100%"
                      :height "40px"
                      :anchor "top center")
  :reserve (struts :side "top" :distance "4%")
  (bar))
